// Script Node.js para testar as bibliotecas de exporta√ß√£o
const fs = require('fs')
const path = require('path')

console.log('üß™ Testando bibliotecas de exporta√ß√£o...\n')

// Teste 1: Verificar se os pacotes est√£o instalados
console.log('1Ô∏è‚É£ Verificando instala√ß√£o dos pacotes...')

const packagesToCheck = ['jspdf', 'jspdf-autotable', 'xlsx']
let allPackagesInstalled = true

packagesToCheck.forEach(pkg => {
  try {
    const packagePath = path.join(__dirname, 'node_modules', pkg)
    if (fs.existsSync(packagePath)) {
      console.log(`   ‚úÖ ${pkg} - Instalado`)
    } else {
      console.log(`   ‚ùå ${pkg} - N√ÉO encontrado`)
      allPackagesInstalled = false
    }
  } catch (error) {
    console.log(`   ‚ùå ${pkg} - Erro ao verificar: ${error.message}`)
    allPackagesInstalled = false
  }
})

// Teste 2: Verificar package.json
console.log('\n2Ô∏è‚É£ Verificando package.json...')
try {
  const packageJsonPath = path.join(__dirname, 'package.json')
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'))
  
  packagesToCheck.forEach(pkg => {
    const version = packageJson.dependencies?.[pkg] || packageJson.devDependencies?.[pkg]
    if (version) {
      console.log(`   ‚úÖ ${pkg}@${version}`)
    } else {
      console.log(`   ‚ùå ${pkg} - N√£o encontrado no package.json`)
    }
  })
} catch (error) {
  console.log(`   ‚ùå Erro ao ler package.json: ${error.message}`)
}

// Teste 3: Tentar importar as bibliotecas (simula√ß√£o)
console.log('\n3Ô∏è‚É£ Verificando imports TypeScript...')

const importsToCheck = [
  "import jsPDF from 'jspdf'",
  "import autoTable from 'jspdf-autotable'",
  "import * as XLSX from 'xlsx'"
]

importsToCheck.forEach(imp => {
  console.log(`   üìù ${imp}`)
})

// Teste 4: Verificar se os arquivos de servi√ßo existem
console.log('\n4Ô∏è‚É£ Verificando arquivos de servi√ßo...')

const servicesToCheck = [
  'src/services/exportService.ts',
  'src/services/exportServiceSimple.ts',
  'src/utils/exportTest.ts'
]

servicesToCheck.forEach(service => {
  const servicePath = path.join(__dirname, service)
  if (fs.existsSync(servicePath)) {
    console.log(`   ‚úÖ ${service} - Existe`)
  } else {
    console.log(`   ‚ùå ${service} - N√ÉO encontrado`)
  }
})

// Teste 5: Verificar configura√ß√µes do Vite
console.log('\n5Ô∏è‚É£ Verificando configura√ß√£o do Vite...')
const viteConfigPath = path.join(__dirname, 'vite.config.ts')
if (fs.existsSync(viteConfigPath)) {
  console.log('   ‚úÖ vite.config.ts encontrado')
  try {
    const viteConfig = fs.readFileSync(viteConfigPath, 'utf8')
    if (viteConfig.includes('define:')) {
      console.log('   ‚úÖ Configura√ß√£o define encontrada')
    } else {
      console.log('   ‚ö†Ô∏è  Pode precisar de configura√ß√£o define para compatibility')
    }
  } catch (error) {
    console.log(`   ‚ùå Erro ao ler vite.config.ts: ${error.message}`)
  }
} else {
  console.log('   ‚ùå vite.config.ts N√ÉO encontrado')
}

console.log('\nüìä Resumo dos testes:')
if (allPackagesInstalled) {
  console.log('   ‚úÖ Todos os pacotes est√£o instalados')
  console.log('   üéØ As bibliotecas devem funcionar no navegador')
  console.log('\nüöÄ Pr√≥ximos passos:')
  console.log('   1. Acesse http://localhost:3000/app/reports/test-export')
  console.log('   2. Clique em "Teste Automatizado Completo"')
  console.log('   3. Abra o Console (F12) para ver logs detalhados')
  console.log('   4. Verifique sua pasta de Downloads')
} else {
  console.log('   ‚ùå Alguns pacotes n√£o foram encontrados')
  console.log('   üîß Execute: npm install jspdf jspdf-autotable xlsx')
}

console.log('\n' + '='.repeat(50))